package com.wpff.common.auth;


import java.io.IOException;
import java.security.Principal;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

/**
 * This is a container request filter that checks for an Authorization header
 * that should container a token that was generated by the AuthResource resource
 * (/authorize/token). This filter is only applied to resource methods that have been
 * annotated with TokenRequired (com.wpff.filter.TokenRequired).
 *
 * If a token that matches key/value in our database, we update the security
 * context with a UserPrincipal that has the name of the User.
 *
 */
public class TokenFilter implements ContainerRequestFilter {

  // Static Bearer text
  private static String BEARER = "Bearer";

  /**
   * JedisPool used in the filter method to see if the token matches a user.
   */
  private JedisPool jedisPool;

  /**
   * Create new request filter. Currently takes a jedis pool.
   * 
   * @param jedisPool
   *          Jedis pool
   */
  public TokenFilter(JedisPool jedisPool) {
    this.jedisPool = jedisPool;
  }

  /**
   * Filter an incoming request. Looks for the authorization header (starting with
   * 'Bearer') and if it matches a key/value in our DB, we update the context so
   * the resource method being called has that information
   * 
   * This checks the Redis DB to get the users name and group.
   *
   * @param requestContext
   *          Context that contains headers and will potentially be modified to
   *          have a new UserPrincipal.
   * @throws IOException
   *           If an error occurs of the caller is unauthorized.
   */
  @Override
  public void filter(ContainerRequestContext requestContext) throws IOException {

    String authHeader = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);

    if ((authHeader == null) || (!authHeader.startsWith(BEARER))) {
      throw new WebApplicationException(
          "Must supply valid Authorization header. Authenticate at /auth/token",
          Response.Status.UNAUTHORIZED);
    }

    // Grab token text from Header
    String token = authHeader.substring(BEARER.length() + 1);
    token = token.trim();

    // Get username and group from Jedis.
    String redisHashName = "user:" + token;
    
    // Get jedis from pool
    Jedis jedis = null;
    try {
      jedis = this.jedisPool.getResource();
      final String username = jedis.hget(redisHashName, "name");
      final String group = jedis.hget(redisHashName, "group");

      if ((username == null) || (username.isEmpty())) {
        throw new WebApplicationException(
            "Must supply valid Authorization header. Authenticate at /auth/token",
            Response.Status.UNAUTHORIZED);
      }

      // Override the security context by giving it a new UserPrincipal
      // that will container the username we got from our DB
      requestContext.setSecurityContext(new SecurityContext() {
        @Override
        public Principal getUserPrincipal() {
          return new Principal() {
            @Override
            public String getName() {
              return username;
            }
          };
        }

        /**
         * Check if the user is in the role or group.
         * This is called to verify if the user is in the 'admin' group.
         * 
         * @param role Role to check for.
         * @return true if the role is equal to the user's group
         */
        @Override
        public boolean isUserInRole(String role) {
          if (role.equals(group)) {
            return true;
          } else {
            return false;
          }
        }

        @Override
        public boolean isSecure() {
          return false;
        }

        @Override
        public String getAuthenticationScheme() {
          return null;
        }
      });
    } finally {
      if (jedis != null) {
        this.jedisPool.returnResource(jedis);
      }
    }
  }

}
