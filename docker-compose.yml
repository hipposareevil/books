version: '3.2'

services:

   # Query the google book API endpoint. Must supply a Google API key 
   query:
     container_name: query
     image: ${BOOK_REPOSITORY}books.query:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet
     environment:
       # GOOGLE_API_KEY must be set in .env file
       - googleapikey=${GOOGLE_API_KEY}

   # List and manage book authors
   author:
     container_name: author
     image: ${BOOK_REPOSITORY}books.author:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet

   # List and manage books
   book:
     container_name: book
     image: ${BOOK_REPOSITORY}books.book:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet

   # Manage users
   user:
     container_name: user
     image: ${BOOK_REPOSITORY}books.user:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet

   # Manage books for user
   user_book:
     container_name: user_book
     image: ${BOOK_REPOSITORY}books.user_book:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet

   # Manage tags
   tag:
     container_name: tag
     image: ${BOOK_REPOSITORY}books.tag:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet

   # Manage authorizations
   authorize:
     container_name: authorize
     image: ${BOOK_REPOSITORY}books.authorize:latest
     expose:
       - 8080
     restart: always
     logging:
       driver: "json-file"
     networks:
       - booknet

   # Frontend webpage + js
   frontend:
     container_name: frontend
     image: ${BOOK_REPOSITORY}books.frontend:dev
#     image: ${BOOK_REPOSITORY}books.frontend:prod
     restart: always
     logging:
       driver: "json-file"
     volumes:
      - "./images/frontend/content/mybooks/:/scratch/"
     networks:
       - booknet

   # Gateway-api runs on port 80 internally
   # It also exposes a swagger.yaml file for the 'swagger' container below.
   gateway:
     container_name: gateway
     image: ${BOOK_REPOSITORY}books.gateway:latest
     ports:
       - 8080:80 
     restart: always
     logging:
       driver: "json-file"
     networks:
      - booknet

   # MySQL database for storing books, authors and users.
   # This loads the books.sql database on initialization
   books_db:
    container_name: books_db
    image: mysql:latest
    volumes:
      - "./database/mysql/:/var/lib/mysql"
      - "./database/initial/books.sql:/docker-entrypoint-initdb.d/books.sql"
    restart: always
    logging:
      driver: "json-file"
    networks:
      - booknet
    environment:
     - MYSQL_ROOT_PASSWORD=booksit 
     - MYSQL_DATABASE=booksdatabase
     - MYSQL_USER=booksuser 
     - MYSQL_PASSWORD=books 


   # Redis key/value store for user and tokens
   token_db:
    container_name: token_db
    image: redis:3.2-alpine
    restart: always
    logging:
      driver: "json-file"
    volumes:
      - "./database/redis/:/data"
    networks:
      - booknet
     

   # Swagger-UI running on port 8080 that is a single UI showing all of the
   # microservices' swagger information.
   swagger:
    container_name: swagger
    image: hipposareevil/swagger-combine
    restart: always
    logging:
      driver: "json-file"
    expose:
      - 8080
    networks:
      - booknet
    environment:
    # DEPLOY_HOST_NAME: Name of host where this is going to be deployed.
    # COMBINE_URLS: comma separated list of URLs to gather yaml entries
    # Later yaml files will override previous yaml entries.
    # For example, gateway:80/swagger.yaml contains 'info' which will override any existing 'info' entries.
      - COMBINE_URLS=author:8080/swagger.yaml,user:8080/swagger.yaml,authorize:8080/swagger.yaml,book:8080/swagger.yaml,tag:8080/swagger.yaml,user_book:8080/swagger.yaml,query:8080/v2/api-docs,gateway:80/swagger.yaml
      - DEPLOY_HOST_NAME=${DEPLOY_HOST_NAME}


networks:
   # network for all containers
   booknet:
